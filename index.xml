<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Issif</title>
    <link>https://thomas.labarussias.fr/</link>
    <description>Recent content on Issif</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Mon, 26 Aug 2019 14:28:24 +0200</lastBuildDate>
    
	<atom:link href="https://thomas.labarussias.fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proxifier Traefik par Traefik</title>
      <link>https://thomas.labarussias.fr/blog/traefik-proxyfier-dashboard/</link>
      <pubDate>Mon, 26 Aug 2019 14:28:24 +0200</pubDate>
      
      <guid>https://thomas.labarussias.fr/blog/traefik-proxyfier-dashboard/</guid>
      <description>Traefik poss√®de une UI basique qui est par d√©faut expos√©e sur un port diff√©rent. Il est possible de faire en sorte que Traefik serve lui m√™me de proxy, cela permet :
 ne plus avoir √† utiliser un port diff√©rent pour acc√©der l&amp;rsquo;UI, mais un domaine classique (&amp;rdquo;traefik.mondomaine.net&amp;rdquo; par ex.) forcer l&amp;rsquo;acc√®s en https avec en prime un certificat Let&amp;rsquo;s Encrypt automatique et gratuit permettre de rajouter une authentification, par d√©faut, l&amp;rsquo;UI est ouverte √† tout une fois activ√©e  Dans mon cas, je fais tourner Traefik dans un container, mais √ßa marchera pareil si vous le fa√Ætes tourner directement sur l&amp;rsquo;host, prenez juste soin de filtrer le port de l&amp;rsquo;UI (8080 par d√©faut) pour qu&amp;rsquo;il n&amp;rsquo;accepte que les connexions de la boucle local (127.</description>
    </item>
    
    <item>
      <title>Falcosidekick 2.6.0</title>
      <link>https://thomas.labarussias.fr/blog/falcosidekick-v-2-6-0/</link>
      <pubDate>Mon, 26 Aug 2019 13:18:10 +0200</pubDate>
      
      <guid>https://thomas.labarussias.fr/blog/falcosidekick-v-2-6-0/</guid>
      <description>Nouvelle release, la 2.6.0, de mon proxy pour falco.
La grosse feature √©tant l&amp;rsquo;ajout du SMTP (envoi d&amp;rsquo;email) comme sortie :
Afin de respecter les standards, la version html contient √©galement la version plaintext. Il est aussi possible d&amp;rsquo;envoyer uniquement la version plaintext, utile pour certains syst√®mes de ticketing qui utilisent l&amp;rsquo;email pour la cr√©ation.
Le repo Github et l&amp;rsquo;image sur le DockerHub.
Enjoy</description>
    </item>
    
    <item>
      <title>Conversion de Types en Go</title>
      <link>https://thomas.labarussias.fr/blog/golang-conversion-types/</link>
      <pubDate>Wed, 21 Aug 2019 17:59:22 +0200</pubDate>
      
      <guid>https://thomas.labarussias.fr/blog/golang-conversion-types/</guid>
      <description>int64 ü†Æ string FormatInt strconv.FormatInt(i int64, base int)  Itoa strconv.Itoa(i int) // Itoa is equivalent to FormatInt(int64(i), 10).  string ü†Æ int64 ParseInt strconv.ParseInt(s string, base int, bitSize int)  Atoi strconv.Atoi(s string) // Atoi is equivalent to ParseInt(s, 10, 0), converted to type int.  string ü†Æ Time  Pour le layout. Pour la location.  Parse time.Parse(layout, value string)  ParseInLocation time.ParseInLocation(layout, value string, loc *Location)  Time ü†Æ string Pour le layout.</description>
    </item>
    
    <item>
      <title>Chart XKCD</title>
      <link>https://thomas.labarussias.fr/blog/chart-xkcd/</link>
      <pubDate>Tue, 20 Aug 2019 16:36:17 +0200</pubDate>
      
      <guid>https://thomas.labarussias.fr/blog/chart-xkcd/</guid>
      <description>Je suis tomb√© chart.xkcd parmi les flux RSS que je suis. J&amp;rsquo;ai trouv√© l&amp;rsquo;id√©e amusante et le rendu agr√©able, j&amp;rsquo;en ai donc fait un micro shortcode pour Hugo :
&amp;lt;div&amp;gt; &amp;lt;svg class=&#39;{{ .Get &amp;quot;name&amp;quot; }}&#39;&amp;gt;&amp;lt;/svg&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/chart.xkcd@1/dist/chart.xkcd.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; const svg{{ .Get &amp;quot;name&amp;quot; | safeJS }} = document.querySelector(&#39;.{{ .Get &amp;quot;name&amp;quot; }}&#39;); new chartXkcd.{{ .Get &amp;quot;type&amp;quot; | safeJS }}(svg{{ .Get &amp;quot;name&amp;quot; | safeJS }}, { {{ .Inner | safeJS }} }); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt;  A caler dans layout/shortcodes/chart-xkcd.</description>
    </item>
    
    <item>
      <title>D√©coder du base64 en Go</title>
      <link>https://thomas.labarussias.fr/blog/decoder-du-base64-en-go/</link>
      <pubDate>Mon, 19 Aug 2019 21:18:47 +0200</pubDate>
      
      <guid>https://thomas.labarussias.fr/blog/decoder-du-base64-en-go/</guid>
      <description>Je tentais de d√©coder la partie payload d&amp;rsquo;un token JWT (https://scotch.io/tutorials/the-anatomy-of-a-json-web-token) quand j&amp;rsquo;ai eu l&amp;rsquo;erreur suivante :
panic: illegal base64 data at input byte 349  Ma fa√ßon de faire √©tait pourtant classique et a toujours fonctionn√© auparavant :
base64.StdEncoding.DecodeString(s)  Et le d√©codage du string via un autre outil ne posait pas de souci. üòß
La solution se trouvait une fois de plus dans la documentation de Go : https://golang.</description>
    </item>
    
  </channel>
</rss>